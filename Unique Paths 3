class Solution {
public:
    int good;
    int ans ;
    void dfs(vector<vector<int>> &grid,int i,int j,int x)
    {
        if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size() || grid[i][j]==-1) 
            return ;
        if(grid[i][j] == 2){
            cout<<"here "<<x<<'\n';
        if(x == good) ans ++;
        return ;
        }
        grid[i][j] = -1;
        x++;
        dfs(grid,i+1,j,x);
        dfs(grid,i-1,j,x);
        dfs(grid,i,j+1,x);
        dfs(grid,i,j-1,x);
        grid[i][j] = 0;
        x--;
    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        int startx,starty;
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[0].size();j++)
            {
                if(grid[i][j]==0) good++;
                else if(grid[i][j]==1)
                {
                    startx=i;
                    starty=j;
                }
            }
        }
        dfs(grid,startx,starty,-1);
        return ans ;
    }
};
