/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int,vector<int>> adj;
    map<int,int> depth;
    int ans=0;
    void make_graph(TreeNode* root,int par)
    {
        if(!root) return ;
        if(par!=-1)
        {
            adj[root->val].push_back(par);
            adj[par].push_back(root->val);
        }
        make_graph(root->left,root->val);
        make_graph(root->right,root->val);
    }
    void dfs(int node)
    {
        for(auto &child:adj[node])
        {
            if(depth.find(child)==depth.end())
            {
                depth[child]=1+depth[node];
                ans=max(ans,depth[child]);
                dfs(child);
            }
        }
    }
    int amountOfTime(TreeNode* root, int start) {
        make_graph(root,-1);
        depth[start]=0;
        dfs(start);
        return ans;
    }
};
