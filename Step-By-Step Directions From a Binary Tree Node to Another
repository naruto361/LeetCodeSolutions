/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool getPath(TreeNode* root,int val,string &s)
    {
        if(!root) return false;
        if(root->val==val) return true;
        
        s+='L';
        bool res1=getPath(root->left,val,s);
        if(res1) return true;
        s.pop_back();
        
        s+='R';
        bool res2=getPath(root->right,val,s);
        if(res2) return true;
        s.pop_back();
        
        return false;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, int p, int q) {
        if(!root || p==root->val || q==root->val) return root;
        TreeNode* l1=lowestCommonAncestor(root->left,p,q);
        TreeNode* l2=lowestCommonAncestor(root->right,p,q);
        if(l1 && l2) return root;
        else if(l1) return l1;
        else return l2;
    }
    string getDirections(TreeNode* root, int startValue, int destValue) {
        TreeNode* lca=lowestCommonAncestor(root,startValue,destValue);
        string ans1,ans2;
        getPath(lca,startValue,ans1);
        getPath(lca,destValue,ans2);
        for(char &c:ans1) c='U';
        return ans1+ans2;
    }
};
