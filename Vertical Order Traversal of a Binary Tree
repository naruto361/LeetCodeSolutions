/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
bool sortbyfirst(pair<int,vector<int>> &a,pair<int,vector<int>> &b)
{
    return a.first<b.first;
}
class Solution {
public:
    unordered_map<int,int> mp;
    void solve(TreeNode* root,int x)
    {
        if(!root) return ;
        mp[root->val] = x;
        solve(root->left,x-1);
        solve(root->right,x+1);
    }
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        if(!root) return {};
        int x=0;
        solve(root,x);
        queue<TreeNode*> q;
        q.push(root);
        map<int,vector<int>> v;
        while(!q.empty())
        {
            int n=q.size();
            map<int,vector<int>> temp;
            for(int i=0;i<n;i++)
            {
                TreeNode* k=q.front();
                temp[mp[k->val]].push_back(k->val);
                q.pop();
                if(k->left) q.push(k->left);
                if(k->right) q.push(k->right);
            }
            for(auto i=temp.begin();i!=temp.end();i++)
            {
                sort(i->second.begin(),i->second.end());
            }
            for(auto i=temp.begin();i!=temp.end();i++)
            {
                for(int j=0;j<i->second.size();j++)
                {
                    v[i->first].push_back(i->second[j]);
                }
            }
        }
        vector<pair<int,vector<int>>> ans;
        for(auto &i:v) ans.push_back(i);
        sort(ans.begin(),ans.end(),sortbyfirst);
        vector<vector<int>> sol;
        for(auto &i:ans) sol.push_back(i.second);
        return sol;
    }
};
