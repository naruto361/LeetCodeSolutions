class Solution {
public:
    map<int,vector<int>> row,col;
    void dfs(int node,vector<bool> &vis,vector<vector<int>> &stones)
    {
        vis[node]=true;
        int x=stones[node][0] , y=stones[node][1];
        for(auto &i:row[x])
        {
            if(!vis[i]) dfs(i,vis,stones);
        }
        for(auto &i:col[y])
        {
            if(!vis[i]) dfs(i,vis,stones);
        }
    }
    int removeStones(vector<vector<int>>& stones) {
        int n=stones.size();
        
        vector<bool> vis(n,false);
        for(int i=0;i<n;i++)
        {
            row[stones[i][0]].push_back(i);
            col[stones[i][1]].push_back(i);
        }
        int conn=0;
        for(int i=0;i<n;i++)
        {
            int x=stones[i][0] , y=stones[i][1];
            if(!vis[i])
            {
                dfs(i,vis,stones);
                ++conn;
            }
        }
        return n-conn;
    }
};
