class Solution {
public:
    vector<vector<int>> dist;
    vector<int> dx={-1,0,1,0};
    vector<int> dy={0,-1,0,1};
    bool valid(int i,int j,int m,int n)
    {
        if(i<0 || j<0 || i>=m || j>=n || dist[i][j]!=INT_MAX) return false;
        return true;
    }
    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        int m=isWater.size() , n=isWater[0].size();
        dist.resize(m,vector<int> (n,INT_MAX));
        queue<pair<int,int>> q;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(isWater[i][j]==1)
                {
                    q.push({i,j});
                    dist[i][j]=0;
                }
            }
        }
        while(!q.empty())
        {
            int x=q.front().first;
            int y=q.front().second;
            q.pop();
            for(int i=0;i<4;i++)
            {
                int newx=x+dx[i];
                int newy=y+dy[i];
                if(valid(newx,newy,m,n))
                {
                    dist[newx][newy]=1+dist[x][y];
                    q.push({newx,newy});
                }
            }
        }
        return dist;
    }
};
