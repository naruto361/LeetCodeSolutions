class Solution {
public:
// Time Complexity O(N^2)
// Space Complexity O(N^2)
    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int k) {
        int m=mat.size() , n=mat[0].size();
        vector<vector<int>> ans(m,vector<int> (n,0));
        for(int i=1;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                    mat[i][j]+=mat[i-1][j];
            }
        }
        for(int i=0;i<m;i++)
        {
            for(int j=1;j<n;j++)
            {
                mat[i][j]+=mat[i][j-1];
            }
        }
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                int row1,col1,row2,col2;
                row1=max(0,i-k);
                row2=min(m-1,i+k);
                col1=max(0,j-k);
                col2=min(n-1,j+k);
                int ans1 =mat[row2][col2] + ((row1>=1 && col1>=1)? mat[row1-1][col1-1]:0);
                int ans2 =(col1>=1 ? mat[row2][col1-1]:0) + (row1>=1 ? mat[row1-1][col2]:0);
                ans[i][j]=ans1-ans2;
                
            } 
        }
        return ans;
    }
};
