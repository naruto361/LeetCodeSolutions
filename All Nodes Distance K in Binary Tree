/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void dfs(vector<int> v[],TreeNode* root)
    {
        if(!root) return ;
        dfs(v,root->left);
        if(root->left)
        {
            v[root->left->val].push_back(root->val);
            v[root->val].push_back(root->left->val);
        }
        if(root->right)
        {
            v[root->right->val].push_back(root->val);
            v[root->val].push_back(root->right->val);
        }
        dfs(v,root->right);
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        vector<int> v[500];
        dfs(v,root);
        // for(auto &i:v[target->val]) cout<<i<<" ";
        // cout<<'\n';
        if(v[target->val].size()==0) return {};// target does not exist
        if(k==0) return {target->val};
        queue<int> q;
        q.push(target->val);
        int level=1;
        vector<int> ans;
        vector<bool> vis(501,false);
        vis[target->val]=true;
        while(!q.empty())
        {
            int n=q.size();
            while(n--)
            {
                int node=q.front();
                q.pop();
                for(auto &i:v[node])
                {
                    
                    if(!vis[i])
                    {
                        if(level==k) ans.push_back(i);
                        q.push(i);
                        vis[i]=true;
                    }
                }
            }
            level++;
            if(level>k) return ans;
        }
        return ans;
    }
};
