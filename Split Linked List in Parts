/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        if(k==1) return {head};
        vector<ListNode*> v;
        vector<int> temp;
        ListNode* t=head;
        while(t)
        {
            temp.push_back(t->val);
            t=t->next;
        }
        int len=temp.size();
        int div=len/k;
        int rem=len%k;
        ListNode* start=NULL;
        ListNode* end=NULL;
        int sz=0;
        int i=0;
        while(i<len)
        {
            while(sz<div+(rem>0? 1:0)){
                if(start==NULL)
                {
                    start=end=new ListNode(temp[i++]);
                }
                else {
                    end->next=new ListNode(temp[i++]);
                    end=end->next;
                }
                sz++;
            }
                v.push_back(start);
                if(rem>0) rem--;
                start=NULL;
                end=NULL;
                sz=0;
        }
        while(v.size()<k) v.push_back(NULL);
        return v;
    }
};
