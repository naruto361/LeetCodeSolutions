class Solution {
public:
    int m,n;
    vector<vector<bool>> pacific , atlantic;
    vector<int> dx={0,1,0,-1};
    vector<int> dy={1,0,-1,0};
    bool isValid(int i,int j)
    {
        if(i<0 || j<0 || i>=m || j>=n) return false;
        return true;
    }
    void dfs(vector<vector<int>> &mat,vector<vector<bool>> &vis,int i,int j)
    {
        vis[i][j]=true;
        for(int k=0;k<4;k++)
        {
            int x=i+dx[k] , y=j+dy[k];
            if(isValid(x,y) && !vis[x][y] && mat[x][y]>=mat[i][j])
            {
                dfs(mat,vis,x,y);
            }
        }
        
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& mat) {
        vector<vector<int>> ans;
        m=mat.size() , n=mat[0].size();
        pacific.resize(m,vector<bool> (n,false));
        atlantic.resize(m,vector<bool> (n,false));
        for(int i=0;i<m;i++)
        {
            dfs(mat,pacific,i,0);
            dfs(mat,atlantic,i,n-1);
        }
        for(int j=0;j<n;j++)
        {
            dfs(mat,pacific,0,j);
            dfs(mat,atlantic,m-1,j);
        }
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(pacific[i][j] && atlantic[i][j])
                {
                    ans.push_back({i,j});
                }
            }
        }
        return ans;
    }
};
