/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int,int> mp;
    TreeNode* build(int &rootIdx,vector<int>& inorder, vector<int>& postorder,int l,int r)
    {
        if(l>r) return NULL;
        int pivot=mp[postorder[rootIdx]];
        rootIdx--;
        TreeNode* temp=new TreeNode(inorder[pivot]);
        temp->right=build(rootIdx,inorder,postorder,pivot+1,r);
        temp->left=build(rootIdx,inorder,postorder,l,pivot-1);
        return temp;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int n=inorder.size();
        int rootIdx=n-1;
        for(int i=0;i<n;i++) mp[inorder[i]]=i;
        return build(rootIdx,inorder,postorder,0,n-1);
    }
};
