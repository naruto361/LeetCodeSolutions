class Solution {
public:
    vector<string> ans;
    void solve(string digits,int idx,string temp,map<char,vector<char>> &mp)
    {
        if(idx==digits.length())
        {
            ans.push_back(temp);
            return ;
        }
        char c=digits[idx];
        for(auto &i:mp[c])
        {
            //cout<<c<<" "<<i<<" \n";
            solve(digits,idx+1,temp+i,mp);
        }
    }
    vector<string> letterCombinations(string digits) {
        // DFS
        // recursion
        int l=digits.length();
        if(l==0) return {};
        map<char,vector<char>> mp;
        mp['2']={'a','b','c'};
        mp['3']={'d','e','f'};
        mp['4']={'g','h','i'};
        mp['5']={'j','k','l'};
        mp['6']={'m','n','o'};
        mp['7']={'p','q','r','s'};
        mp['8']={'t','u','v'};
        mp['9']={'w','x','y','z'};
        solve(digits,0,"",mp);
        return ans;
    }
};
