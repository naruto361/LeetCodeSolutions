bool sortbylen(string &x,string &y)
{
    return x.length()<y.length();
}
class Solution {
public:
    int longestStrChain(vector<string>& words) {
        unordered_map<string,int> mp;
        int ans=1;
        sort(words.begin(),words.end(),sortbylen);
        for(auto &word:words)
        {
            mp[word]=1;
            for(int i=0;i<word.length();i++)
            {
                string prev=word.substr(0,i) + word.substr(i+1);
                if(mp.find(prev)!=mp.end())
                {
                    mp[word]=max(mp[word],1+mp[prev]);
                }
            }
            ans=max(ans,mp[word]);
        }
        return ans;
    }
};
