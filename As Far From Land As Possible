class Solution {
public:
    vector<int> dx={0,1,0,-1};
    vector<int> dy={1,0,-1,0};
    int maxDistance(vector<vector<int>>& grid) {
        queue<pair<int,int>> q;
        int m=grid.size() , n=grid[0].size();
        vector<vector<int>> dist(m,vector<int> (n,-1));
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                    q.push({i,j});
                    dist[i][j]=0;
                }
            }
        }
        if(q.size()==0 || q.size()==m*n) return -1;
        int maxi=-1;
        while(!q.empty())
        {
            int x=q.front().first;
            int y=q.front().second;
            q.pop();
            for(int i=0;i<4;i++)
            {
                int xx=x+dx[i];
                int yy=y+dy[i];
                if(xx>=0 && yy>=0 && xx<m && yy<n && dist[xx][yy]==-1)
                {
                    dist[xx][yy]=1+dist[x][y];
                    q.push({xx,yy});
                    maxi=max(maxi,dist[xx][yy]);
                }
            }
        }
        // for(int i=0;i<m;i++)
        // {
        //     for(int j=0;j<n;j++)
        //     {
        //         cout<<dist[i][j]<<" ";
        //     }
        //     cout<<'\n';
        // }
        return maxi;
    }
};
