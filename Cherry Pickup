
class Solution {
public:
    // DP
    // O(N^3)
    int dp[51][51][51] ;
    int solve(int r1,int c1,int r2,vector<vector<int>> &grid)
    {
        // means maximum cherries we can pick up when person1 is r1,c1 and 
        // person 2 is at r2 ,c2 till (n-1,n-1) is reached . 
        
        int c2 = r1 + c1 - r2;        
        if(r1>=grid.size() || c1>=grid[0].size() || r2>=grid.size() || c2>=grid[0].size() 
           || grid[r1][c1] == -1 || grid[r2][c2]== -1)
            return INT_MIN;
        
        // p1 and p2 reach destination
        if(r1 == grid.size()-1 && c1== grid[0].size()-1) 
            return grid[r1][c1];
        
        if(dp[r1][c1][r2] != 0)
            return dp[r1][c1][r2];
        
        int cherry = 0;
        
        cherry += grid[r1][c1];
        
        if(!(r1==r2 && c1==c2))
        {
            cherry += grid[r2][c2];
        }
        // we have 4 options
        int f1 = solve(r1+1,c1,r2+1,grid); // v v
        int f2 = solve(r1,c1+1,r2,grid); // h h
        int f3 = solve(r1+1,c1,r2,grid); // v h
        int f4 = solve(r1,c1+1,r2+1,grid); // h v
        
        cherry +=  max( max(f1,f2) , max(f3,f4));
        dp[r1][c1][r2] = cherry ;
        return cherry ;
    }
    int cherryPickup(vector<vector<int>>& grid) {
        int dp[51][51][51] = {0};
        // c2 = r1 + c1 - r2;
        int ans = solve(0,0,0,grid);
        // cannot reach end , so return 0 .
        if(ans < 0 ) return 0;
        return ans;
    }
};

/////////////////////////////////////////////////////////////////////////////////////

/ BACKTRACKING
// TLE

class Solution {
public:
    int maxi=0;
    void helper(int i,int j,vector<vector<int>> &grid,int ccsf)
    {
        if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size() || grid[i][j]==-1)
            return ;
        if( i == 0 && j == 0 )
        {
             maxi = max (maxi , ccsf);
            return ;
        }
        int x = grid[i][j];
        grid[i][j] = 0;
        helper(i-1,j,grid,ccsf + x);
        helper(i,j-1,grid,ccsf + x);
        grid[i][j] = x;
    }
    void solve(int i,int j,vector<vector<int>> &grid,int ccsf)
    {
        if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size() || grid[i][j]==-1)
            return ;
        if(i == grid.size()-1 && j == grid[0].size()-1)
        {
            helper(i,j,grid,ccsf);
        }
        int x = grid[i][j];
        grid[i][j] = 0
		
        solve(i+1,j,grid,ccsf + x);
        solve(i,j+1,grid,ccsf + x);
		
        grid[i][j] = x;
    }
    int cherryPickup(vector<vector<int>>& grid) {
	
        if(grid.size()==1 && grid[0].size()==1) return grid[0][0];
        solve(0,0,grid,0);
        // i,j,grid,cherry collected so far
        return maxi;
    }
};

Recursion -- TLE

// Recursion 
// No memoization , NO DP !!!
class Solution {
public:
    int solve(int r1,int c1,int r2,int c2,vector<vector<int>> &grid)
    {
        // means maximum cherries we can pick up when person1 is r1,c1 and 
        // person 2 is at r2 ,c2 till (n-1,n-1) is reached . 
		
        if(r1>=grid.size() || c1>=grid[0].size() || r2>=grid.size() || c2>=grid[0].size() 
           || grid[r1][c1] == -1 || grid[r2][c2]== -1) return INT_MIN;
		   
        if(r1 == grid.size()-1 && c1== grid[0].size()-1) 
			return grid[r1][c1];
		
        int cherry = 0;
        cherry += grid[r2][c2];
		
        if(!(r1==r2 && c1==c2))
        {
            cherry += grid[r1][c1];
        }
		
        // we have 4 options -- 
		// vv , hh , vh , hv
		
        int f1 = solve(r1+1,c1,r2+1,c2,grid); // v v
        int f2 = solve(r1,c1+1,r2,c2+1,grid); // h h
        int f3 = solve(r1+1,c1,r2,c2+1,grid); // v h
        int f4 = solve(r1,c1+1,r2+1,c2,grid); // h v
		
        cherry +=  max( max(f1,f2) , max(f3,f4));
        return cherry ;
    }
	
    int cherryPickup(vector<vector<int>>& grid) {
	
        int ans = solve(0,0,0,0,grid);
		if(ans < 0) return 0;
		return ans;
    }
};

DP O(n^4) -- AC

// DP
// O(N^4)
class Solution {
public:
    int dp[51][51][51][51] ;
    int solve(int r1,int c1,int r2,int c2,vector<vector<int>> &grid)
    {
        // means maximum cherries we can pick up when person1 is r1,c1 and 
        // person 2 is at r2 ,c2 till (n-1,n-1) is reached . 
		
        if(r1>=grid.size() || c1>=grid[0].size() || r2>=grid.size() || c2>=grid[0].size() 
           || grid[r1][c1] == -1 || grid[r2][c2]== -1)
            return INT_MIN;
        
        // p1 and p2 reach destination
        if(r1 == grid.size()-1 && c1== grid[0].size()-1) 
            return grid[r1][c1];
        
        if(dp[r1][c1][r2][c2] != 0)
            return dp[r1][c1][r2][c2];
        
        int cherry = 0;
        
        cherry += grid[r1][c1];
        
        if(!(r1==r2 && c1==c2))
        {
            cherry += grid[r2][c2];
        }
		
        // we have 4 options
		
        int f1 = solve(r1+1,c1,r2+1,c2,grid); // v v
        int f2 = solve(r1,c1+1,r2,c2+1,grid); // h h
        int f3 = solve(r1+1,c1,r2,c2+1,grid); // v h
        int f4 = solve(r1,c1+1,r2+1,c2,grid); // h v
        
        cherry +=  max( max(f1,f2) , max(f3,f4));
        dp[r1][c1][r2][c2] = cherry ;
		
        return cherry ;
    }
    int cherryPickup(vector<vector<int>>& grid) {
	
        int dp[51][51][51][51] = {0};
        int ans = solve(0,0,0,0,grid);
		
        // if cannot reach end , return 0 .
        if(ans < 0 ) return 0;
        return ans;
    }
};

DP O(n^3) -- AC

// DP
// O(N^3)
// r1+c1 = r2 + c2
// implies c2 = r1 + c1 -r2
class Solution {
public:
    
    int dp[51][51][51] ;
    int solve(int r1,int c1,int r2,vector<vector<int>> &grid)
    {
        // means maximum cherries we can pick up when person1 is r1,c1 and 
        // person 2 is at r2 ,c2 till (n-1,n-1) is reached . 
        
        int c2 = r1 + c1 - r2;        
		
        if(r1>=grid.size() || c1>=grid[0].size() || r2>=grid.size() || c2>=grid[0].size() 
           || grid[r1][c1] == -1 || grid[r2][c2]== -1)
            return INT_MIN;
        
        // p1 and p2 reach destination
        if(r1 == grid.size()-1 && c1== grid[0].size()-1) 
            return grid[r1][c1];
        
        if(dp[r1][c1][r2] != 0)
            return dp[r1][c1][r2];
        
        int cherry = 0;
        
        cherry += grid[r1][c1];
        
        if(!(r1==r2 && c1==c2))
        {
            cherry += grid[r2][c2];
        }
		
        // we have 4 options
		
        int f1 = solve(r1+1,c1,r2+1,grid); // v v
        int f2 = solve(r1,c1+1,r2,grid); // h h
        int f3 = solve(r1+1,c1,r2,grid); // v h
        int f4 = solve(r1,c1+1,r2+1,grid); // h v
        
        cherry +=  max( max(f1,f2) , max(f3,f4));
        dp[r1][c1][r2] = cherry ;
		
        return cherry ;
    }
    int cherryPickup(vector<vector<int>>& grid) {
	
        int dp[51][51][51] = {0};
        // c2 = r1 + c1 - r2;
        int ans = solve(0,0,0,grid);
		
        // if cannot reach end , return 0 .
        if(ans < 0 ) return 0;
        return ans;
    }
};
