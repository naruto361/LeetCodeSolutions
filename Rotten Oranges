class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m=grid.size() , n=grid[0].size();
        queue<pair<int,int>> q;
        int dx[4]={0,0,-1,1};
        int dy[4]={-1,1,0,0};
        int fresh=0;
        int ans=-1;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1) fresh++;
                else if(grid[i][j]==2) q.push({i,j});
            }
        }
        while(!q.empty())
        {
            int l=q.size();
            while(l--){
                int x=q.front().first;
                int y=q.front().second;
                q.pop();
                for(int i=0;i<4;i++)
                {
                    int xx=x+dx[i];
                    int yy=y+dy[i];
                    if(xx>=0 && yy>=0 && xx<m && yy<n && grid[xx][yy]==1 )
                    {
                        grid[xx][yy]=2;
                        q.push({xx,yy});
                        fresh--;
                    }
                }
            }
            ans++;
            
        }
        
        // for(int i=0;i<m;i++)
        // {
        //     for(int j=0;j<n;j++)
        //     {
        //         cout<<grid[i][j]<<" ";
        //     }
        //     cout<<'\n';
        // }
        if(fresh>0) return -1;
        if(ans==-1) return 0;
        return ans;
    }
};
