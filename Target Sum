class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        // x1+x2 =sum
        // x1-x2 =target
        // x1=(sum+target)/2
        int sum=0;
        for(auto &i:nums) sum += i;
        if(abs(target)>sum) return 0;
        int x=sum+target;
        if(x&1) return 0;
        x/=2;
        int n=nums.size();
        // Space Complexity : O(N^2)
        // vector<vector<int>> dp(n+1,vector<int> (x+1,0));
        // //dp[0][0]=1;
        // for(int i=0;i<=n;i++) dp[i][0]=1;
        // for(int i=1;i<=n;i++)
        // {
        //     for(int j=0;j<=x;j++)
        //     {
        //         dp[i][j]=dp[i-1][j];
        //          if(j>=nums[i-1])
        //         dp[i][j]+=dp[i-1][j-nums[i-1]];
        //     }
        // }
        // return dp[n][x];
        
        // Space Complexity : O(N);
        vector<int> dp(x+1,0);
        dp[0]=1;
        for(int i=1;i<=n;i++)
        {
            for(int j=x;j>=nums[i-1];j--)
            {
                dp[j]+=dp[j-nums[i-1]];
            }
        }
        return dp[x];
    }
};
