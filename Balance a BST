/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root,vector<int> &v)
    {
        if(!root) return ;
        if(root->left) inorder(root->left,v);
        v.push_back(root->val);
        if(root->right) inorder(root->right,v);
    }
    TreeNode* solve(vector<int> &v,int l,int r)
    {
        if(l==r) return new TreeNode(v[l]);
        while(l<r)
        {
            int mid=l + (r-l)/2;
            TreeNode* curr=new TreeNode(v[mid]);
            curr->left=solve(v,l,mid-1);
            curr->right=solve(v,mid+1,r);
            return curr;
        }
        return NULL;
    }
    TreeNode* balanceBST(TreeNode* root) {
        vector<int> v;
        inorder(root,v);
        return solve(v,0,v.size()-1);
    }
};
