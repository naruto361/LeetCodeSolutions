class Solution {
public:
    void dfs(int i,vector<bool> &vis,vector<vector<int>> &v,stack<int> &st)
    {
        if(vis[i]) return ;
        vis[i]=true;
        for(auto &j:v[i])
        {
            if(!vis[j])
            {
                dfs(j,vis,v,st);
                
            }
        }
        st.push(i);
    }
    bool cycle(int i,vector<vector<int>> &v,vector<int> &visited)
    {
        if(visited[i]==2) return true;
        visited[i]=2;
        for(auto &j:v[i])
        {
            if(visited[j]!=1)
            {
                if(cycle(j,v,visited)) return true;
            }
        }
        visited[i]=1;
        return false;
    }
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<bool> vis(numCourses,false);
        vector<int> visited(numCourses,0);
        vector<vector<int>> v(numCourses);
        vector<int> ans;
        stack<int> st;
        for(auto &i:prerequisites)
        {
            v[i[0]].push_back(i[1]);
        }
        // if cycle prsent
        // i.e not DAG return {}
        for(int i=0;i<numCourses;i++)
        {
            if(cycle(i,v,visited)) return {};
        }
        
        for(int i=0;i<numCourses;i++)
        {
            if(!vis[i])
            {
                dfs(i,vis,v,st);
            }
        }
        while(!st.empty()) {ans.push_back(st.top());st.pop();}
        reverse(ans.begin(),ans.end());
        return ans;
        
    }
};
