class Solution {
public:
    int longestArithSeqLength(vector<int>& nums) {
//  ------------ LONGEST ARITHMETIC PROGRESSION -----------------
//         int n = nums.size();
//         if(n<3) return n;
//         int maxi = 2;
//         vector<vector<int>> dp(n,vector<int> (n));
//         for(int i=0;i<n;i++) dp[i][n-1] = 2;
//         for(int j=n-2;j>=1;j--)
//         {
//             int i=j-1,k=j+1;
//             while(i>=0 && k<=n-1)
//             {
//                 if(nums[i]+nums[k] < 2*nums[j])
//                 {
//                     k++;
//                 }
//                 else if(nums[i]+nums[k] > 2*nums[j])
//                 {
//                     dp[i][j] = 2;
//                     i--;
//                 }
//                 else
//                 {
//                     dp[i][j] = 1+dp[j][k];
//                     maxi = max( maxi , dp[i][j] );
//                     i--;k++;
//                 }
                
//             }
//             while(i>=0) {dp[i][j]=2;i--;}
            
//         }
//         for(int i=0;i<n;i++)
//         {
//             for(int j=0;j<n;j++) cout<<dp[i][j]<<' ';
//             cout<<'\n';
//         }
//         return  maxi;
        
        int n = nums.size();
        if(n<3) return n;
        vector<vector<int>>v(n,vector<int>(1001,0));
        int ans=2;
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                int diff=nums[i]-nums[j]+500;
                v[i][diff]=v[j][diff]>0?v[j][diff]+1:2;
                ans=max(ans,v[i][diff]);
            }
        }
        return ans;
        // Similar to LIS
    }
};
