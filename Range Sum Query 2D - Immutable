class NumMatrix {
public:
    vector<vector<int>> mat;
    NumMatrix(vector<vector<int>>& matrix) {
        mat.resize(matrix.size(), vector<int>(matrix[0].size(), 0));
        for(int i=0;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[0].size();j++)
            {
                mat[i][j]=matrix[i][j]+ (j>0 ? mat[i][j-1]:0);
            }
        }
        for(int i=1;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[0].size();j++)
            {
                mat[i][j]+=mat[i-1][j];
            }
        }
        // for(int i=0;i<mat.size();i++)
        // {
        //     for(int j=0;j<mat[0].size();j++)
        //     {
        //         cout<<mat[i][j]<<' ';
        //     }
        //     cout<<'\n';
        // }
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        return (mat[row2][col2] - 
        (col1>0 ? mat[row2][col1-1]:0) -
         (row1>0 ? mat[row1-1][col2]:0)  +
         ((row1>0 && col1>0) ? mat[row1-1][col1-1]:0));
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * int param_1 = obj->sumRegion(row1,col1,row2,col2);
 */
