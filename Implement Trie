class Trie {
public:
    struct Node{
        Node* arr[26];
        bool end=false;
    };
    Node* root;
    Trie() {
        root = new Node();
    }
    
    bool find(string &word,Node* temp)
    {
        for(int i=0;i<word.length();i++)
        {
            if(temp->arr[word[i]-'a']==NULL) return false;
            temp=temp->arr[word[i]-'a'];
        }
        return temp->end;
    }
    bool findsw(string &word,Node* temp)
    {
        for(int i=0;i<word.length();i++)
        {
            if(temp->arr[word[i]-'a']==NULL) return false;
            temp=temp->arr[word[i]-'a'];
        }
        return true;
    }
    void insert(string word) {
        Node* temp = root;
        for(char c :word)
        {
            if(!temp->arr[c-'a']) temp->arr[c-'a']=new Node();
            temp=temp->arr[c-'a'];
        }
        temp->end=true;
    }
    
    bool search(string word) {
        return find(word,root);
    }
    
    bool startsWith(string prefix) {
        return findsw(prefix,root);
        
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
